---
title: "Female Mice Liver Expression"
subtitle: Vignette for SHAPley Forest
format:
  html:
    theme: none
    minimal: true
    embed-resources: true
    css: custom.css
    toc: true
    html-math-method: mathjax
vignette: >
  %\VignetteIndexEntry{Female Mice Liver Expression}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

## Female Mice Liver Expression

### The Dataset

The female mice liver originates from the `WGCNA` package. It involves with the network analysis of liver expression data from female mice that was used by this [paper](https://doi.org/10.1371/journal.pgen.0020130) (2006. Ghazalpour, Doss, et al).

### Loading Libraries

In order to use SHAPley Forest, we load the following required packages.

#### A Note on Installing WGCNA

WGCNA is a core requirement to use the `shapwff` function. In order to use, its dependent packages and correct version from **`Bioconductor`** needs to be installed. The following commands will install the required packages properly:

```{r install wgcna}
#| eval: false
if (!require("BiocManager", quietly = TRUE))
       install.packages("BiocManager")
BiocManager::install(version = "3.16")
BiocManager::install(c("GO.db", "preprocessCore", "impute") )
```

It is of note as of right now, the current site for WGCNA documentation is no longer maintained.

For more information on WGCNA, see the original paper from Langfelder and Hovarth (2014): <https://doi.org/10.1186/1471-2105-9-559>

#### Loading Required Packages

To run **`SHAPley Forest`**, these packages must be loaded.

```{r load pkg}
#| label: load-packages
#| warning: false
library(WGCNA)
library(shapleyforest)
library(fuzzyforest) # remove later
library(randomForest) # remove later
library(fastshap) # remove later
library(doParallel)
```

Other packages used in this vignette outside of **`SHAPley Forest`**.

```{r other pkg}
#| warning: false
library(DT)
library(dplyr)
library(purrr)
library(reshape2)
library(ggplot2)

library(flashClust) # needed for WGCNA preprocessing
```

### Data Preprocessing

#### Female Liver Data

The data contains **3600 predictors** and **142 observations**.

```{r load femdata}
data("femData")

# if via raw data
# femData <- read.csv("LiverFemale3600.csv", stringsAsFactors = FALSE)
```

Below are the listed 142 predictors:

```{r predict femdata}
predictors <- data.frame(predictors = names(femData))
datatable(predictors)
```

First, we keep only the gene expression data and set the gene names as the index.

```{r datexp0}
datExp0 <- as.data.frame(t(femData[, -c(1:8)]))
names(datExp0) <- femData$substanceBXH
rownames(datExp0) <- names(femData)[-c(1:8)]
```

Before we can use WGCNA, we first remove low quality genes and samples.

```{r wgcna 1a}
gsg <- goodSamplesGenes(datExp0, verbose = 3)
gsg$allOK
```

If you want to output the removed genes and samples, run the following command:

```{r wgcna 1b}
if (!gsg$allOK) {
  if (sum(!gsg$goodGenes) > 0)
    printFlush(paste("Removing genes:", paste(names(datExp0)[!gsg$goodGenes],
      collapse = ", ")))
  if (sum(!gsg$goodSamples) > 0)
    printFlush(paste("Removing samples:", paste(rownames(datExp0)[!gsg$goodSamples],
      collapse = ", ")))
  datExp0 <- datExp0[gsg$goodSamples, gsg$goodGenes]
}
```

However, here all of the genes and samples are kept. Next, we remove outliers through hierarchical clustering via `flashClust`.

```{r wgcna 1c}
sampleTree <- flashClust(dist(datExp0), method = "average")

sizeGrWindow(12, 9)
par(cex = 0.6)
par(mar = c(0, 4, 2, 0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub = "", xlab = "",
  cex.lab = 1.5, cex.axis = 1.5, cex.main = 2)

abline(h = 15, col = "red")
```

Note one gene is above the cut line. We print and remove the outlier.

```{r wgcna 1d}
clust <- cutreeStatic(sampleTree, cutHeight = 15, minSize = 10)
table(clust)
```

Now denote the new dataframe of the remaining samples and genes.

```{r wgcna 1e}
keepSamples <- (clust == 1)
datExp <- datExp0[keepSamples, ]
nGenes <- ncol(datExp)
nSamples <- nrow(datExp)
```

#### Clinical Traits Data

Now we load the clinical traits data of the liver females mices. It contains **361 predictors** and **38 observations.**

```{r load traits}
data("traitData")

# if via raw data
# traitData <- read.csv("ClinicalTraits.csv")

predictors <- data.frame(predictors = names(traitData))
datatable(predictors)
```

We keep the necessary columns needed from the Clinical Traits dataset. The remaining dataset now contains **27 observations**.

```{r clean traits}
allTraits <- traitData[, -c(31, 16)]
allTraits <- allTraits[, c(2, 11:36)]
predictors <- data.frame(predictors = names(allTraits))
datatable(predictors)
```

Analog to that of the female liver expression data, we create a data frame for clinical traits.

```{r final traits}
femaleSamples <- rownames(datExp)
traitRows <- match(femaleSamples, allTraits$Mice)
datTraits <- allTraits[traitRows, -1]
rownames(datTraits) <- allTraits[traitRows, 1]
```

This gives two data sets ready for WGCNA:

-   `datExp` contains the expression level data.

-   `datTraits` contains the trait data.

### WGCNA

To run WGCNA in `SHAPley Forest`, we first must define parameters for the clustering analysis.

First we find the optimal power based on our network topology analysis.

To do so, we define the range of soft-thresholding powers to test (1-10, 12, 14, 16, 18, 20).

```{r wgcna 2a}
#| warning: false
powers <- c(c(1:10), seq(from = 12, to = 20, by = 2))
sft <- pickSoftThreshold(datExp, powerVector = powers, verbose = 5)
```

Now we plot the **scale-free topology fit index vs soft-thresholding power** and the **mean connectivity vs soft-thresholding power.**

```{r wgcna 2b}
sizeGrWindow(9, 5)
par(mfrow = c(1, 2))
cex1 <- 0.9
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], xlab = "Soft Threshold (power)",
  ylab = "Scale Free Topology Model Fit,signed R^2", type = "n", main = paste("Scale independence"))
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2], labels = powers,
  cex = cex1, col = "red")

# this line corresponds to using an R^2 cut-off of h
abline(h = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5], xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
  type = "n", main = paste("Mean connectivity"))
text(sft$fitIndices[, 1], sft$fitIndices[, 5], labels = powers, cex = cex1, col = "red")
```

To select the best power, it must have an $R^2$ near 0.8 and the relative elbow point of both plots. Here **power = 6** is optimal.

Now we can finally test run WGCNA to see how much modules are produced.

```{r wgcna 2c}
# Optional parameters: reassignThreshold = 0, mergeCutHeight = 0.25, 
# numericLabels = FALSE, saveTOMFileBase = "femaleMouseTOM", verbose = 3

net <- blockwiseModules(datExp, power = 6, TOMType = "unsigned", 
                        minModuleSize = 30, pamRespectsDendro = FALSE, 
                        saveTOMs = TRUE)

```

```{r wgcna 2d}
netColors <- labels2colors(net$colors)

geneTree <- net$dendrograms[[1]]
plotDendroAndColors(geneTree, netColors, "Dynamic Tree Cut",
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)

module_info <- data.frame(gene = colnames(datExp), module = netColors)
```

The module distribution is displayed below:

```{r wgcna 2e}
colors <- data.frame(table(netColors))
datatable(colors)
```

Lastly, we clean the data by removing missing values in the response value and impute these values in the predictor data via random forest.

```{r final clean}
y <- datTraits$weight_g
X <- datExp
missing_y <- which(is.na(y))
X <- X[-missing_y, ]
y <- y[-missing_y]
X_impute <- rfImpute(X, y, iter = 5, ntree = 5000)
```

Then we have our final expression data: `final_Liver_Exp`

```{r final data}
final_Liver_Exp <- X_impute
# Optionally, save the data
# save(final_Liver_Exp, file = "final_Liver_Expr.RData")
```

### SHAPley Forest

First we prepare the data set for **`SHAPley Forest`** . Note `expression_levels` are the explanatory variables and `weight` denotes the response.

```{r shap prep}
# to skip data preprocessing:
# data("Liver_Exp")

# Liver_Exp <- final_Liver_Exp
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
```

#### Running SHAPley Forest

To run **`SHAPley Forest`**'s functions, we organize the set dired parameters.

```{r shap param}
module_membership <- net$colors
mtry_factor <- 1
drop_fraction <- 0.25
number_selected <- 10
keep_fraction <- 0.05
min_ntree <- 5000
ntree_factor <- 5
final_ntree <- 5000
```

Now we put the parameters into its desired use in `SHAPley Forest`:

-   `screen_params` designate parameters used for the screening step of SHAPley Forest.

-   `select_params` designate parameters used for the selection step of SHAPley Forest.

-   `WGCNA_params` designate parameters used in WGCNA step.

    -   This is required to use SHAPley Forest via WGCNA (`shapwff`).

```{r shap param fct}
screen_params <- screen_control(drop_fraction = drop_fraction, 
                                keep_fraction = keep_fraction,
                                min_ntree = min_ntree, mtry_factor = mtry_factor, 
                                ntree_factor = ntree_factor)
select_params <- select_control(drop_fraction = drop_fraction, 
                                number_selected = number_selected,
                                min_ntree = min_ntree, mtry_factor = mtry_factor, 
                                ntree_factor = ntree_factor)
WGCNA_params <- WGCNA_control(power = 6, minModuleSize = 30, TOMType = "unsigned",
                              reassignThreshold = 0, mergeCutHeight = 0.25, 
                              numericLabels = TRUE, pamRespectsDendro = FALSE)
```

Finally, we run **`SHAPley Forest`**. Here we run the **full fastshap model** (`shap_type=1`).

```{r shap fit, message = "false"}
ffs_fit <- shapwff(expression_levels, weight, shap_model = 1, 
                   shap_type = "shapley", WGCNA_params = WGCNA_params, 
                   select_params = select_params, 
                   screen_params = screen_params, 
                   final_ntree = final_ntree, num_processors=1)

ffs_fit <- shapwff(expression_levels, weight, shap_model = "full", 
                   WGCNA_params = WGCNA_params, 
                   select_params = select_params, 
                   screen_params = screen_params, 
                   final_ntree = final_ntree, num_processors=2, parallel = 1,
                   min_features = 10)
```

#### Interpreting The Result

First we output the final important features and their corresponding SHAP values.

```{r final shap}
datatable(ffs_fit$final_SHAP)
```

To visualize the impact of each features globally, we print out the **importance plot** and **decision plot:**

```{r important shap}
plot_importance(ffs_fit)
```

```{r decision shap}
plot_decisions(ffs_fit)
```

Finally, we can visualize the distribution of modules via **module plot**:

```{r module shap}
plot_modules(ffs_fit)
```

### Other Relevant Feature Selection Methods

For comparison sake, we run two other feature selection methods.

#### Fuzzy Forest

##### Loading Required Packages

```{r load ff pkg}
library(fuzzyforest)
```

##### Running Fuzzy Forest

We use the same parameter settings as **`SHAPley Forest`** here and run Fuzzy Forest.

```{r ff fit}
ffs_fit <- wff(expression_levels, weight, WGCNA_params = WGCNA_params, 
                   select_params = select_params, 
                   screen_params = screen_params, 
                   final_ntree = final_ntree, num_processors=1)
```

Below are the important features (via Permutation VIMs):

```{r}
ffs_fit$feature_list
```

And the corresponding module distribution:

```{r}
modplot(ffs_fit)
```

#### Random Forest

Finally, we run a random forest model with similar relevant parameters.

```{r rf fit}
rf_model <- randomForest(y=weight, x= expression_levels, importance = TRUE)
```

##### Permutation VIMs

Variable importance is measured via Permutation VIMs.

```{r rf important}
importance_scores <- importance(rf_model)
importance_df <- data.frame(Feature = rownames(importance_scores), Importance = importance_scores[, "IncNodePurity"])
importance_df <- importance_df %>%
  arrange(desc(Importance))
datatable(head(importance_df, 10))
```
