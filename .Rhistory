sum(complete_rows)
length(y_clean)
info_xA
#| label: load-packages
#| warning: false
library(dplyr)
library(readxl)
library(DT)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapff)
library(fuzzyforest)
library(randomForest)
library(fastshap) # remove later
options(stringsAsFactors = FALSE)
#| warning: false
#setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/Visit A-G")
data <- read_excel("Vis_A_G_Lockdown_102624.xlsx")
info <- data %>%
mutate(
casecontrol = ifelse(casecontrol == "case", 1, 0),
# Replace NAs with 0 in columns containing "cvl" or "vload2" in their names
across(matches("cvl|vload2"), ~ ifelse(is.na(.), 0, .)),
visitdate = as.numeric(visitdate),
esthivdate = as.numeric(esthivdate),
lastnopdate_one = as.numeric(lastnopdate_one),
esthaartinit = as.numeric(esthaartinit),
frstpardate_one = as.numeric(frstpardate_one)
)
#| warning: TRUE
data_long <- info %>%
select(macsidnumber, age, visit, RawAA, RawEEA, RawPEA, RawGEA, RawTL, casecontrol) %>%
mutate(batch = ifelse(visit %in% c("1", "2", "3", "4"), "Batch 1", "Batch 2")) %>%
arrange(macsidnumber, age)
# Model for RawAA
modelb2_AA <- lm(RawAA ~ age + batch , data = data_long)
info$aar <- residuals(modelb2_AA)
# Model for RawEEA
modelb2_EEA <- lm(RawEEA ~ age + batch , data = data_long)
info$eeaa <- residuals(modelb2_EEA)
# Model for RawPEA
modelb2_PEA <- lm(RawPEA ~ age + batch , data = data_long)
info$peaa <- residuals(modelb2_PEA)
# Model for RawGEA
modelb2_GEA <- lm(RawGEA ~ age + batch , data = data_long)
info$geaa <- residuals(modelb2_GEA)
# Model for RawTL
modelb2_TL <- lm(RawTL ~ age + batch , data = data_long)
info$dnamtladjage <- residuals(modelb2_TL)
info_x <- info %>% select(-RawAA, -RawEEA, -RawPEA, -RawGEA, -RawTL, -aar, -eeaa, -peaa,
-geaa, -dnamtladjage)
info_xA <- info_x %>% filter(visit == 1)
y <- info %>% filter(visit == 1) %>% select(aar)
y <- as.vector(y)
gsg <- goodSamplesGenes(info_xA, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
info_xA <- info_xA[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
info_xA <- info_xA[gsg$goodSamples, ]
y <- y[gsg$goodSamples] # Remove corresponding indices in y
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(info_xA, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
View(y)
info_xA <- info_x %>% filter(visit == 1)
y <- info %>% filter(visit == 1) %>% select(aar)
y <- as.vector(y$aar)
gsg <- goodSamplesGenes(info_xA, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
info_xA <- info_xA[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
info_xA <- info_xA[gsg$goodSamples, ]
y <- y[gsg$goodSamples] # Remove corresponding indices in y
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(info_xA, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
# Identify complete cases in info_xA
complete_rows <- complete.cases(info_xA)
info_xA_clean <- info_xA[complete_rows, ]
y_clean <- y[complete_rows]
# Compute the dissimilarity matrix
dissTOM <- as.dist(1 - cor(info_xA_clean, use = "pairwise.complete.obs"))
#dissTOM <- as.dist(1 - cor(info_xA))
dendro_data <- hclust(dissTOM, method = "average")
plot(dendro_data, main = "Dendrogram with Raw Distances", xlab = "Genes", ylab = "Height")
#X <- as.data.frame(info_xA)
y <- y_clean
X <- as.data.frame(info_xA_clean)
screen_params <- screen_control(min_ntree = 500)
select_params <- select_control(number_selected = 10, drop_fraction = 0.1, ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff <- shapwff(X, y, WGCNA_params = wgcna_params, select_params = select_params,
shap_model= 1, screen_params = screen_params,
num_processors = 1, nodesize = 1)
View(all_modules)
View(initial_screen)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
library(shapleyff)
library(shapleyforest)
help("shapff")
# call
library(devtools)
library(roxygen2)
devtools::install_github("timothyshen213/shapff")
library(shapleyforest)
library(shapleyforest)
# Name Change
detach("package:shapleyforest", unload = TRUE)
library(devtools)
library(roxygen2)
library(shapleyforest)
data("Liver_Exp")
data("LiverExp")
force(Liver_Exp)
force(Liver_Exp)
detach("package:shapleyforest", unload = TRUE)
library(devtools)
library(roxygen2)
devtools::install_github("timothyshen213/shapff")
library(shapleyforest)
#detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
#devtools::install_github("timothyshen213/shapff")
library(shapleyforest)
detach("package:shapleyforest", unload = TRUE)
detach("package:shapleyforest", unload = TRUE)
library(shapleyforest)
detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
#devtools::install_github("timothyshen213/shapff")
#library(shapleyforest)
suppressWarnings(library(shapleyforest))
load(Liver_Exp)
data(Liver_Exp)
Liver_Exp <- final_Liver_Exp
force(Liver_Exp)
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
#devtools::install_github("timothyshen213/shapff")
#library(shapleyforest)
suppressWarnings(library(shapleyforest))
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
library(fuzzyforest)
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(expression_levels, weight, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1)
detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
#devtools::install_github("timothyshen213/shapff")
library(fuzzyforest)
library(WGCNA)
#library(shapleyforest)
suppressWarnings(library(shapleyforest))
detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
#devtools::install_github("timothyshen213/shapff")
library(fuzzyforest)
library(WGCNA)
#library(shapleyforest)
suppressWarnings(library(shapleyforest))
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(expression_levels, weight, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1)
#| label: load-packages
#| warning: false
library(dplyr)
library(readxl)
library(DT)
library(patchwork)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapff)
#| label: load-packages
#| warning: false
library(dplyr)
library(readxl)
library(DT)
library(patchwork)
library(WGCNA)
library(Rfast)
library(ggplot2)
library(reshape2)
library(shapleyforest)
library(fuzzyforest)
library(randomForest)
library(fastshap) # remove later
options(stringsAsFactors = FALSE)
#| warning: false
#setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/Visit A-G")
data <- read_excel("Vis_A_G_Lockdown_102624.xlsx")
info <- data %>%
mutate(
casecontrol = ifelse(casecontrol == "case", 1, 0),
# Replace NAs with 0 in columns containing "cvl" or "vload2" in their names
across(matches("cvl|vload2"), ~ ifelse(is.na(.), 0, .)),
visitdate = as.numeric(visitdate),
esthivdate = as.numeric(esthivdate),
lastnopdate_one = as.numeric(lastnopdate_one),
esthaartinit = as.numeric(esthaartinit),
frstpardate_one = as.numeric(frstpardate_one)
)
#| warning: TRUE
data_long <- info %>%
select(macsidnumber, age, visit, RawAA, RawEEA, RawPEA, RawGEA, RawTL, casecontrol) %>%
mutate(batch = ifelse(visit %in% c("1", "2", "3", "4"), "Batch 1", "Batch 2")) %>%
arrange(macsidnumber, age)
# Model for RawAA
modelb2_AA <- lm(RawAA ~ age + batch , data = data_long)
info$aar <- residuals(modelb2_AA)
# Model for RawEEA
modelb2_EEA <- lm(RawEEA ~ age + batch , data = data_long)
info$eeaa <- residuals(modelb2_EEA)
# Model for RawPEA
modelb2_PEA <- lm(RawPEA ~ age + batch , data = data_long)
info$peaa <- residuals(modelb2_PEA)
# Model for RawGEA
modelb2_GEA <- lm(RawGEA ~ age + batch , data = data_long)
info$geaa <- residuals(modelb2_GEA)
# Model for RawTL
modelb2_TL <- lm(RawTL ~ age + batch , data = data_long)
info$dnamtladjage <- residuals(modelb2_TL)
info_x <- info %>% select(-RawAA, -RawEEA, -RawPEA, -RawGEA, -RawTL, -aar, -eeaa, -peaa,
-geaa, -dnamtladjage)
info_xA <- info_x %>% filter(visit == 1)
y <- info %>% filter(visit == 1) %>% select(aar, eeaa, peaa, geaa, dnamtladjage)
gsg <- goodSamplesGenes(info_xA, verbose = 3)
if (!gsg$allOK) {
if (sum(!gsg$goodGenes) > 0) {
info_xA <- info_xA[, gsg$goodGenes]
}
if (sum(!gsg$goodSamples) > 0) {
info_xA <- info_xA[gsg$goodSamples, ]
y <- y[gsg$goodSamples,] # Remove corresponding indices in y
}
}
powers <- c(1:20)
sft <- pickSoftThreshold(info_xA, powerVector = powers, verbose = 5)
par(mfrow = c(1, 2))
plot(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)", ylab = "Scale Free Topology Model Fit, signed R^2",
type = "n", main = "Scale Free Topology")
text(sft$fitIndices[, 1], -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = 0.9, col = "red")
plot(sft$fitIndices[, 1], sft$fitIndices[, 5],
xlab = "Soft Threshold (power)", ylab = "Mean Connectivity",
type = "n", main = "Mean Connectivity vs. Soft Threshold")
text(sft$fitIndices[, 1], sft$fitIndices[, 5],
labels = powers, cex = 0.9, col = "red")
# Identify complete cases in info_xA
complete_rows <- complete.cases(info_xA)
info_xA_clean <- info_xA[complete_rows, ]
y_clean <- y[complete_rows, ]
# Compute the dissimilarity matrix
dissTOM <- as.dist(1 - cor(info_xA_clean, use = "pairwise.complete.obs"))
#dissTOM <- as.dist(1 - cor(info_xA))
dendro_data <- hclust(dissTOM, method = "average")
plot(dendro_data, main = "Dendrogram with Raw Distances", xlab = "Genes", ylab = "Height")
total_NA <- sort(colSums(is.na(info)), decreasing = TRUE)
head(total_NA, 10)
#X <- as.data.frame(info_xA)
y <- as.vector(y_clean$aar)
X <- as.data.frame(info_xA_clean)
screen_params <- screen_control(min_ntree = 500, keep_fraction = 0.2)
select_params <- select_control(number_selected = 5, drop_fraction = 0.1,
ntree_factor = 2, min_ntree = 500)
wgcna_params <- WGCNA_control(power = 5)
sff_aar <- shapwff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
shap_model= "full", screen_params = screen_params, auto_initial = 2,
num_processors = 1, nodesize = 1, debug = 1, verbose = 0,
initial = TRUE, min_features = 10)
#library(devtools)
#library(roxygen2)
devtools::install_github("timothyshen213/shapff")
ffs_fit <- shapwff(expression_levels, weight, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1,
nodesize = 1,
auto_initial = 2,
debug = 1,
verbose = 0,
initial = TRUE,
min_features = 10)
detach("package:shapleyforest", unload = TRUE)
#library(devtools)
#library(roxygen2)
devtools::install_github("timothyshen213/shapff")
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(expression_levels, weight, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1,
nodesize = 1,
auto_initial = 2,
debug = 1,
verbose = 0,
initial = TRUE,
min_features = 10)
library(fuzzyforest)
library(WGCNA)
#library(shapleyforest)
suppressWarnings(library(shapleyforest))
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.05,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(expression_levels, weight, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1,
nodesize = 1,
auto_initial = 2,
debug = 1,
verbose = 0,
initial = TRUE,
min_features = 10)
sff_aar <- shapwff(X, y, WGCNA_params = wgcna_params,
select_params = select_params,
shap_model= "full",
screen_params = screen_params,
auto_initial = 2,
num_processors = 1,
nodesize = 1,
debug = 1,
verbose = 0,
initial = TRUE,
min_features = 10)
ffs_fit <- shapwff(X, y, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1,
nodesize = 1,
debug = 0,
verbose = 0,
initial = TRUE,
auto_initial = 2,
min_features = 10)
ffs_fit <- shapwff(X, y, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
final_ntree = final_ntree, num_processors=1,
nodesize = 1,
debug = 0,
verbose = 1,
initial = TRUE,
auto_initial = 2,
min_features = 10)
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.1,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(X, y, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
num_processors=1,
nodesize = 1,
debug = 0,
verbose = 1,
initial = TRUE,
auto_initial = 2,
min_features = 10)
data(Liver_Exp)
weight <- Liver_Exp[, 1]
expression_levels <- Liver_Exp[, -1]
screen_params <- screen_control(drop_fraction = 0.25,
keep_fraction = 0.25,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
select_params <- select_control(drop_fraction = 0.25,
number_selected = 10,
min_ntree = 5000, mtry_factor = 1,
ntree_factor = 5)
ffs_fit <- shapwff(X, y, shap_model = "full",
select_params = select_params,
screen_params = screen_params,
num_processors=1,
nodesize = 1,
debug = 0,
verbose = 1,
initial = TRUE,
auto_initial = 2,
min_features = 10)
help(shapff)
help(shapff)
help(shapwff)
help(shapwff())
help(shapff)
library(devtools)
library(roxygen2)
setwd("C:/Users/timot/OneDrive/Documents/1 - UCLA/Research/shapff")
setwd("./shapff")
document()
